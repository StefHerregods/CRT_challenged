v <- ggplot(data = df, aes(x = v_obs, y = v_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Drift rate\n') +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 2, by = 1), limits = c(0, 2.1)) +
scale_y_continuous(breaks = seq(0, 2, by = 1), limits = c(0, 2.1)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
ter <- ggplot(data = df, aes(x = ter_obs, y = ter_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Non-decision time\n') +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 0.5, by = 0.2), limits = c(0, 0.55)) +
scale_y_continuous(breaks = seq(0, 0.5, by = 0.2), limits = c(0, 0.55)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
a2 <- ggplot(data = df, aes(x = a2_obs, y = a2_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Confidence boundary\nseparation') +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 10.1)) +
scale_y_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 10.1)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
a2_slope_upper <- ggplot(data = df, aes(x = a2_slope_upper_obs, y = a2_slope_upper_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Upper confidence\nboundary slope') +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 7, by = 1), limits = c(0, 7.1)) +
scale_y_continuous(breaks = seq(0, 7, by = 1), limits = c(0, 7.1)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
a2_slope_lower <- ggplot(data = df, aes(x = a2_slope_lower_obs, y = a2_slope_lower_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Lower confidence\nboundary slope') +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 7, by = 1), limits = c(0, 7.1)) +
scale_y_continuous(breaks = seq(0, 7, by = 1), limits = c(0, 7.1)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
starting_point_confidence <- ggplot(data = df, aes(x = starting_point_confidence_obs, y = starting_point_confidence_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Post-decision starting\npoint bias') +
coord_fixed() +
scale_x_continuous(breaks = seq(0.2, 0.8, by = 0.2), limits = c(0.15, 0.85)) +
scale_y_continuous(breaks = seq(0.2, 0.8, by = 0.2), limits = c(0.15, 0.85)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
vratio <- ggplot(data = df, aes(x = postdriftmod_obs, y = postdriftmod_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle(expression(atop(italic('v') * '-ratio'), paste(''))) +
coord_fixed() +
scale_x_continuous(breaks = seq(0, 5, by = 1), limits = c(0, 5)) +
scale_y_continuous(breaks = seq(0, 5, by = 1), limits = c(0, 5)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
ter2_1 <- ggplot(data = df, aes(x = ter2_1_obs, y = ter2_1_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Non-decision time\n(cj = 1)') +
coord_fixed() +
scale_x_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
scale_y_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
ter2_2 <- ggplot(data = df, aes(x = ter2_2_obs, y = ter2_2_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Non-decision time\n(cj = 2)') +
coord_fixed() +
scale_x_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
scale_y_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
ter2_3 <- ggplot(data = df, aes(x = ter2_3_obs, y = ter2_3_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Non-decision time\n(cj = 3)') +
coord_fixed() +
scale_x_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
scale_y_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
ter2_4 <- ggplot(data = df, aes(x = ter2_4_obs, y = ter2_4_pred)) +
geom_point(shape = 16, size = 2, alpha = 0.3) +
xlab('Observed') +
ylab('Simulated') +
ggtitle('Non-decision time\n(cj = 4)') +
coord_fixed() +
scale_x_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
scale_y_continuous(breaks = seq(-2, 2, by = 1), limits = c(-2.2, 2.2)) +
theme(plot.title = element_text(hjust = 0.5, size = 11))
recovery_plots <- ggarrange(a, v, ter, vratio, starting_point_confidence, a2, a2_slope_upper, a2_slope_lower, ter2_1, ter2_2, ter2_3, ter2_4, ncol = 4, nrow = 3)
ggsave('figures/ParamRecovery.png', recovery_plots, device = 'png', units = 'in', width = 7.5, height = 6.5, dpi = 1000)
recovery_plots <- ggarrange(a, v, ter, vratio, starting_point_confidence, a2, a2_slope_upper, a2_slope_lower, ter2_1, ter2_2, ter2_3, ter2_4, ncol = 4, nrow = 3, align = "hv")
ggsave('figures/ParamRecovery.png', recovery_plots, device = 'png', units = 'in', width = 7.5, height = 6.5, dpi = 1000)
dataset <- 1
# Load data
if (dataset == 1){
df_obs <- read.csv('data/observations/data_Bang_2019_Exp2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Bang2019/Bang2019_params.csv')
df_pred <- read.csv('data/model_predictions/Bang2019_predictions.csv')
} else if (dataset == 2){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt1_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt1/Haddara2022_Expt1_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt1_predictions.csv')
} else if (dataset == 3){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt2/Haddara2022_Expt2_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt2_predictions.csv')
}
# Add unique identifier
df_params$id <- row.names(df_params)
df_obs <- merge(df_params[, c('sub', 'experiment', 'id')], df_obs, by = c('sub', 'experiment'))
df_pred <- merge(df_params[, c('sub', 'experiment', 'id')], df_pred, by = c('sub', 'experiment'))
# Compute mean values (grouped by individual, cj)
df_obs_mean = df_obs%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
df_pred_mean = df_pred%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
# Count participants per group
data_count_obs = df_obs %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
data_count_pred = df_pred %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
# Compute mean values (grouped by cj_category, cj)
cRT_cj_categorized_obs = df_obs_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_obs$count, each = 4))
cRT_cj_categorized_pred = df_pred_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_pred$count, each = 4))
cRT_cj_categorized_obs$source <- 'Observed'
cRT_cj_categorized_pred$source <- 'Simulated'
df_merged <- rbind(cRT_cj_categorized_pred, cRT_cj_categorized_obs)
color_scheme <- c("Observed" = "black", "Simulated" = "red")
p1 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
# Choose a dataset to analyse
# [1] Bang et al. (2019)
# [2] Haddara & Rahnev (2022) - Experiment 1
# [3] Haddara & Rahnev (2022) - Experiment 2
dataset <- 1
# Load data
if (dataset == 1){
df_obs <- read.csv('data/observations/data_Bang_2019_Exp2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Bang2019/Bang2019_params.csv')
df_pred <- read.csv('data/model_predictions/Bang2019_predictions.csv')
} else if (dataset == 2){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt1_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt1/Haddara2022_Expt1_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt1_predictions.csv')
} else if (dataset == 3){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt2/Haddara2022_Expt2_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt2_predictions.csv')
}
# Add unique identifier
df_params$id <- row.names(df_params)
df_obs <- merge(df_params[, c('sub', 'experiment', 'id')], df_obs, by = c('sub', 'experiment'))
df_pred <- merge(df_params[, c('sub', 'experiment', 'id')], df_pred, by = c('sub', 'experiment'))
# Compute mean values (grouped by individual, cj)
df_obs_mean = df_obs%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
df_pred_mean = df_pred%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
# Count participants per group
data_count_obs = df_obs %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
data_count_pred = df_pred %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
# Compute mean values (grouped by cj_category, cj)
cRT_cj_categorized_obs = df_obs_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_obs$count, each = 4))
cRT_cj_categorized_pred = df_pred_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_pred$count, each = 4))
cRT_cj_categorized_obs$source <- 'Observed'
cRT_cj_categorized_pred$source <- 'Simulated'
df_merged <- rbind(cRT_cj_categorized_pred, cRT_cj_categorized_obs)
color_scheme <- c("Observed" = "black", "Simulated" = "red")
p1 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
p2 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
p1 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
# Choose a dataset to analyse
# [1] Bang et al. (2019)
# [2] Haddara & Rahnev (2022) - Experiment 1
# [3] Haddara & Rahnev (2022) - Experiment 2
dataset <- 2
# Load data
if (dataset == 1){
df_obs <- read.csv('data/observations/data_Bang_2019_Exp2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Bang2019/Bang2019_params.csv')
df_pred <- read.csv('data/model_predictions/Bang2019_predictions.csv')
} else if (dataset == 2){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt1_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt1/Haddara2022_Expt1_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt1_predictions.csv')
} else if (dataset == 3){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt2/Haddara2022_Expt2_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt2_predictions.csv')
}
# Add unique identifier
df_params$id <- row.names(df_params)
df_obs <- merge(df_params[, c('sub', 'experiment', 'id')], df_obs, by = c('sub', 'experiment'))
df_pred <- merge(df_params[, c('sub', 'experiment', 'id')], df_pred, by = c('sub', 'experiment'))
# Compute mean values (grouped by individual, cj)
df_obs_mean = df_obs%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
df_pred_mean = df_pred%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
# Count participants per group
data_count_obs = df_obs %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
data_count_pred = df_pred %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
# Compute mean values (grouped by cj_category, cj)
cRT_cj_categorized_obs = df_obs_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_obs$count, each = 4))
cRT_cj_categorized_pred = df_pred_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_pred$count, each = 4))
cRT_cj_categorized_obs$source <- 'Observed'
cRT_cj_categorized_pred$source <- 'Simulated'
df_merged <- rbind(cRT_cj_categorized_pred, cRT_cj_categorized_obs)
color_scheme <- c("Observed" = "black", "Simulated" = "red")
p2 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
# Choose a dataset to analyse
# [1] Bang et al. (2019)
# [2] Haddara & Rahnev (2022) - Experiment 1
# [3] Haddara & Rahnev (2022) - Experiment 2
dataset <- 3
# Load data
if (dataset == 1){
df_obs <- read.csv('data/observations/data_Bang_2019_Exp2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Bang2019/Bang2019_params.csv')
df_pred <- read.csv('data/model_predictions/Bang2019_predictions.csv')
} else if (dataset == 2){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt1_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt1/Haddara2022_Expt1_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt1_predictions.csv')
} else if (dataset == 3){
df_obs <- read.csv('data/observations/data_Haddara_2022_Expt2_preprocessed.csv')
df_params <- read.csv('data/model_parameters/Haddara2022_Expt2/Haddara2022_Expt2_params.csv')
df_pred <- read.csv('data/model_predictions/Haddara2022_Expt2_predictions.csv')
}
# Add unique identifier
df_params$id <- row.names(df_params)
df_obs <- merge(df_params[, c('sub', 'experiment', 'id')], df_obs, by = c('sub', 'experiment'))
df_pred <- merge(df_params[, c('sub', 'experiment', 'id')], df_pred, by = c('sub', 'experiment'))
# Compute mean values (grouped by individual, cj)
df_obs_mean = df_obs%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
df_pred_mean = df_pred%>%
group_by(id, cj)%>%
summarise(cj_category = mean(cj_category),
rtconf = mean(rtconf), .groups = 'drop')
# Count participants per group
data_count_obs = df_obs %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
data_count_pred = df_pred %>%
group_by(id) %>%
summarise(cj_category = mean(cj_category), .groups = 'drop') %>%
group_by(cj_category) %>%
summarise(count = n(),.groups = 'drop') %>%
mutate(proportion = count / sum(count))
# Compute mean values (grouped by cj_category, cj)
cRT_cj_categorized_obs = df_obs_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_obs$count, each = 4))
cRT_cj_categorized_pred = df_pred_mean %>%
mutate(cj_category = case_when(cj_category == 1 ~ 'Group 1',
cj_category == 2 ~ 'Group 2',
cj_category == 3 ~ 'Group 3',
cj_category == 4 ~ 'Group 4'),
rtconf = rtconf * 1000) %>%
group_by(cj_category, cj) %>%
summarise(mean = mean(rtconf), se = sd(rtconf) / sqrt(n()), .groups = 'drop') %>%
group_by(cj_category) %>%
mutate(min_RT_conf = min(mean), count = n()) %>%
ungroup() %>%
mutate(count = rep(data_count_pred$count, each = 4))
cRT_cj_categorized_obs$source <- 'Observed'
cRT_cj_categorized_pred$source <- 'Simulated'
df_merged <- rbind(cRT_cj_categorized_pred, cRT_cj_categorized_obs)
color_scheme <- c("Observed" = "black", "Simulated" = "red")
p3 <- ggplot(data = df_merged, aes(x = cj, y = mean, color = source)) +
facet_grid(. ~ cj_category) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0, size = 0.6) +
geom_line(size = 1) +
geom_text(aes(x = 2.5, y = 870, label = paste('N = ', count, sep = '')), size = 3.5, family = "Helvetica", fontface = 'plain') +  # Explicitly set family here
scale_y_continuous(limits = c(50, 1100)) +
labs(y = 'cRT (ms)', x = 'Confidence') +
scale_color_manual(values = color_scheme) +
theme(
text = element_text(size = 12, family = "Helvetica"),
plot.title = element_text(size = 12, hjust = 0.5, family = "Helvetica"),
axis.text = element_text(color = 'black', size = 10, family = "Helvetica"),
axis.ticks = element_line(color = 'black'),
panel.spacing.x = unit(10, 'pt'),
strip.background = element_rect(color = 'black', fill = 'white'),
strip.text = element_text(color = 'black', size = 12, family = "Helvetica"),
legend.position = 'none'
)
plot <- ggarrange(p1, p2, p3, ncol = 2, nrow = 2)
plot
ggsave('rtconf.png', device = 'png', units = 'in', width = 7.5, height = 3.5, dpi = 1000)
